// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.BulletFields))]
  public unsafe class BulletFieldsPrototype : ComponentPrototype<Quantum.BulletFields> {
    public MapEntityId Source;
    public FPVector2 Direction;
    public AssetRef<BulletData> BulletData;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.BulletFields component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.BulletFields result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Source, in context, out result.Source);
        result.Direction = this.Direction;
        result.BulletData = this.BulletData;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public Button _left;
    public Button _right;
    public Button _up;
    public Button _down;
    public Button _a;
    public Button _b;
    public Button _c;
    public Button _d;
    public Button _l1;
    public Button _r1;
    public Button _select;
    public Button _start;
    public Byte _analogRightTrigger;
    public Byte _analogLeftTrigger;
    public Quantum.Prototypes.QuantumThumbSticksPrototype ThumbSticks;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result._left = this._left;
        result._right = this._right;
        result._up = this._up;
        result._down = this._down;
        result._a = this._a;
        result._b = this._b;
        result._c = this._c;
        result._d = this._d;
        result._l1 = this._l1;
        result._r1 = this._r1;
        result._select = this._select;
        result._start = this._start;
        result._analogRightTrigger = this._analogRightTrigger;
        result._analogLeftTrigger = this._analogLeftTrigger;
        this.ThumbSticks.Materialize(frame, ref result.ThumbSticks, in context);
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.KCC2D))]
  public unsafe partial class KCC2DPrototype : ComponentPrototype<Quantum.KCC2D> {
    public AssetRef<KCC2DConfig> Config;
    public Quantum.Prototypes.FrameTimerPrototype GroundedJumpTimer;
    partial void MaterializeUser(Frame frame, ref Quantum.KCC2D result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.KCC2D component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.KCC2D result, in PrototypeMaterializationContext context = default) {
        result.Config = this.Config;
        this.GroundedJumpTimer.Materialize(frame, ref result.GroundedJumpTimer, in context);
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.KCCQueryResult))]
  public unsafe partial class KCCQueryResultPrototype : StructPrototype {
    public FPVector2 SurfaceTangent;
    public FP ContactAngle;
    public QBoolean Overlapping;
    public QBoolean Ignore;
    public Hit Contact;
    public Quantum.QEnum32<KCCContactType> ContactType;
    partial void MaterializeUser(Frame frame, ref Quantum.KCCQueryResult result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.KCCQueryResult result, in PrototypeMaterializationContext context = default) {
        result.SurfaceTangent = this.SurfaceTangent;
        result.ContactAngle = this.ContactAngle;
        result.Overlapping = this.Overlapping;
        result.Ignore = this.Ignore;
        result.Contact = this.Contact;
        result.ContactType = this.ContactType;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.MovementData))]
  public unsafe partial class MovementDataPrototype : ComponentPrototype<Quantum.MovementData> {
    public QBoolean IsFacingRight;
    partial void MaterializeUser(Frame frame, ref Quantum.MovementData result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.MovementData component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.MovementData result, in PrototypeMaterializationContext context = default) {
        result.IsFacingRight = this.IsFacingRight;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerLink))]
  public unsafe partial class PlayerLinkPrototype : ComponentPrototype<Quantum.PlayerLink> {
    public PlayerRef Player;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerLink component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context = default) {
        result.Player = this.Player;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumDemoInputPlatformer2D))]
  public unsafe partial class QuantumDemoInputPlatformer2DPrototype : StructPrototype {
    public FPVector2 AimDirection;
    public Button Left;
    public Button Right;
    public Button Up;
    public Button Down;
    public Button Jump;
    public Button Dash;
    public Button Fire;
    public Button AltFire;
    public Button Use;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumDemoInputPlatformer2D result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumDemoInputPlatformer2D result, in PrototypeMaterializationContext context = default) {
        result.AimDirection = this.AimDirection;
        result.Left = this.Left;
        result.Right = this.Right;
        result.Up = this.Up;
        result.Down = this.Down;
        result.Jump = this.Jump;
        result.Dash = this.Dash;
        result.Fire = this.Fire;
        result.AltFire = this.AltFire;
        result.Use = this.Use;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumDemoInputShooter3D))]
  public unsafe partial class QuantumDemoInputShooter3DPrototype : StructPrototype {
    public FPVector2 MoveDirection;
    public FP Pitch;
    public FP Yaw;
    public Button Jump;
    public Button Dash;
    public Button Fire;
    public Button AltFire;
    public Button Use;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumDemoInputShooter3D result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumDemoInputShooter3D result, in PrototypeMaterializationContext context = default) {
        result.MoveDirection = this.MoveDirection;
        result.Pitch = this.Pitch;
        result.Yaw = this.Yaw;
        result.Jump = this.Jump;
        result.Dash = this.Dash;
        result.Fire = this.Fire;
        result.AltFire = this.AltFire;
        result.Use = this.Use;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumDemoInputTopDown))]
  public unsafe partial class QuantumDemoInputTopDownPrototype : StructPrototype {
    public FPVector2 MoveDirection;
    public FPVector2 AimDirection;
    public Button Left;
    public Button Right;
    public Button Up;
    public Button Down;
    public Button Jump;
    public Button Dash;
    public Button Fire;
    public Button AltFire;
    public Button Use;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumDemoInputTopDown result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumDemoInputTopDown result, in PrototypeMaterializationContext context = default) {
        result.MoveDirection = this.MoveDirection;
        result.AimDirection = this.AimDirection;
        result.Left = this.Left;
        result.Right = this.Right;
        result.Up = this.Up;
        result.Down = this.Down;
        result.Jump = this.Jump;
        result.Dash = this.Dash;
        result.Fire = this.Fire;
        result.AltFire = this.AltFire;
        result.Use = this.Use;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumHighresThumbSticks))]
  public unsafe partial class QuantumHighresThumbSticksPrototype : StructPrototype {
    public Byte _leftThumbAngle;
    public Byte _leftThumbMagnitude;
    public Int16 _rightThumbX;
    public Int16 _rightThumbY;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumHighresThumbSticks result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumHighresThumbSticks result, in PrototypeMaterializationContext context = default) {
        result._leftThumbAngle = this._leftThumbAngle;
        result._leftThumbMagnitude = this._leftThumbMagnitude;
        result._rightThumbX = this._rightThumbX;
        result._rightThumbY = this._rightThumbY;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumRegularThumbSticks))]
  public unsafe partial class QuantumRegularThumbSticksPrototype : StructPrototype {
    public Byte _leftThumbAngle;
    public Byte _leftThumbMagnitude;
    public Byte _rightThumbAngle;
    public Byte _rightThumbMagnitude;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumRegularThumbSticks result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumRegularThumbSticks result, in PrototypeMaterializationContext context = default) {
        result._leftThumbAngle = this._leftThumbAngle;
        result._leftThumbMagnitude = this._leftThumbMagnitude;
        result._rightThumbAngle = this._rightThumbAngle;
        result._rightThumbMagnitude = this._rightThumbMagnitude;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [ExcludeFromPrototype()]
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.QuantumThumbSticks))]
  public unsafe partial class QuantumThumbSticksPrototype : UnionPrototype {
    public string _field_used_;
    public Quantum.Prototypes.QuantumRegularThumbSticksPrototype Regular;
    public Quantum.Prototypes.QuantumHighresThumbSticksPrototype HighRes;
    partial void MaterializeUser(Frame frame, ref Quantum.QuantumThumbSticks result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.QuantumThumbSticks result, in PrototypeMaterializationContext context = default) {
        switch (_field_used_) {
          case "REGULAR": this.Regular.Materialize(frame, ref *result.Regular, in context); break;
          case "HIGHRES": this.HighRes.Materialize(frame, ref *result.HighRes, in context); break;
          case "": case null: break;
          default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SkillFields))]
  public unsafe class SkillFieldsPrototype : ComponentPrototype<Quantum.SkillFields> {
    public FP TimeToActivate;
    public MapEntityId Source;
    public AssetRef<SkillData> SkillData;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.SkillFields component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.SkillFields result, in PrototypeMaterializationContext context = default) {
        result.TimeToActivate = this.TimeToActivate;
        PrototypeValidator.FindMapEntity(this.Source, in context, out result.Source);
        result.SkillData = this.SkillData;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SkillInventory))]
  public unsafe partial class SkillInventoryPrototype : ComponentPrototype<Quantum.SkillInventory> {
    public Quantum.Prototypes.FrameTimerPrototype CastRateTimer;
    public AssetRef<SkillInventoryData> SkillInventoryData;
    partial void MaterializeUser(Frame frame, ref Quantum.SkillInventory result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.SkillInventory component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.SkillInventory result, in PrototypeMaterializationContext context = default) {
        this.CastRateTimer.Materialize(frame, ref result.CastRateTimer, in context);
        result.SkillInventoryData = this.SkillInventoryData;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SpawnIdentifier))]
  public unsafe partial class SpawnIdentifierPrototype : ComponentPrototype<Quantum.SpawnIdentifier> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.SpawnIdentifier result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.SpawnIdentifier component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.SpawnIdentifier result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.SpawnPlaces))]
  public unsafe class SpawnPlacesPrototype : ComponentPrototype<Quantum.SpawnPlaces> {
    [DynamicCollectionAttribute()]
    public MapEntityId[] Spawners = {};
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.SpawnPlaces component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.SpawnPlaces result, in PrototypeMaterializationContext context = default) {
        if (this.Spawners.Length == 0) {
          result.Spawners = default;
        } else {
          var list = frame.AllocateList(out result.Spawners, this.Spawners.Length);
          for (int i = 0; i < this.Spawners.Length; ++i) {
            EntityRef tmp = default;
            PrototypeValidator.FindMapEntity(this.Spawners[i], in context, out tmp);
            list.Add(tmp);
          }
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Status))]
  public unsafe partial class StatusPrototype : ComponentPrototype<Quantum.Status> {
    public AssetRef<StatusData> StatusData;
    public FP CurrentHealth;
    public QBoolean IsDead;
    public Quantum.Prototypes.FrameTimerPrototype RespawnTimer;
    public Quantum.Prototypes.FrameTimerPrototype RegenTimer;
    public Quantum.Prototypes.FrameTimerPrototype InvincibleTimer;
    public Quantum.Prototypes.FrameTimerPrototype DisconnectedTimer;
    partial void MaterializeUser(Frame frame, ref Quantum.Status result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Status component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Status result, in PrototypeMaterializationContext context = default) {
        result.StatusData = this.StatusData;
        result.CurrentHealth = this.CurrentHealth;
        result.IsDead = this.IsDead;
        this.RespawnTimer.Materialize(frame, ref result.RespawnTimer, in context);
        this.RegenTimer.Materialize(frame, ref result.RegenTimer, in context);
        this.InvincibleTimer.Materialize(frame, ref result.InvincibleTimer, in context);
        this.DisconnectedTimer.Materialize(frame, ref result.DisconnectedTimer, in context);
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Weapon))]
  public unsafe partial class WeaponPrototype : StructPrototype {
    public QBoolean IsRecharging;
    public Int32 CurrentAmmo;
    public Quantum.Prototypes.FrameTimerPrototype FireRateTimer;
    public Quantum.Prototypes.FrameTimerPrototype DelayToStartRechargeTimer;
    public Quantum.Prototypes.FrameTimerPrototype RechargeRate;
    public FP ChargeTime;
    public AssetRef<WeaponData> WeaponData;
    partial void MaterializeUser(Frame frame, ref Quantum.Weapon result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Weapon result, in PrototypeMaterializationContext context = default) {
        result.IsRecharging = this.IsRecharging;
        result.CurrentAmmo = this.CurrentAmmo;
        this.FireRateTimer.Materialize(frame, ref result.FireRateTimer, in context);
        this.DelayToStartRechargeTimer.Materialize(frame, ref result.DelayToStartRechargeTimer, in context);
        this.RechargeRate.Materialize(frame, ref result.RechargeRate, in context);
        result.ChargeTime = this.ChargeTime;
        result.WeaponData = this.WeaponData;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.WeaponInventory))]
  public unsafe partial class WeaponInventoryPrototype : ComponentPrototype<Quantum.WeaponInventory> {
    public Int32 CurrentWeaponIndex;
    [ArrayLengthAttribute(2)]
    public Quantum.Prototypes.WeaponPrototype[] Weapons = new Quantum.Prototypes.WeaponPrototype[2];
    partial void MaterializeUser(Frame frame, ref Quantum.WeaponInventory result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.WeaponInventory component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.WeaponInventory result, in PrototypeMaterializationContext context = default) {
        result.CurrentWeaponIndex = this.CurrentWeaponIndex;
        for (int i = 0, count = PrototypeValidator.CheckLength(Weapons, 2, in context); i < count; ++i) {
          this.Weapons[i].Materialize(frame, ref *result.Weapons.GetPointer(i), in context);
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
