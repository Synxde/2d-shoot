// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  public enum KCCContactType : int {
    NONE = 0,
    GROUND = 1,
    CEIL = 2,
    WALL = 3,
    SLOPE = 4,
  }
  public enum KCCState : int {
    FREE_FALLING = 0,
    GROUNDED = 1,
    SLOPED = 2,
    WALLED = 3,
    DASHING = 4,
    JUMPED = 5,
    DOUBLE_JUMPED = 6,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    _left = 1 << 0,
    _right = 1 << 1,
    _up = 1 << 2,
    _down = 1 << 3,
    _a = 1 << 4,
    _b = 1 << 5,
    _c = 1 << 6,
    _d = 1 << 7,
    _l1 = 1 << 8,
    _r1 = 1 << 9,
    _select = 1 << 10,
    _start = 1 << 11,
  }
  public static unsafe partial class FlagsExtensions {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length, "Invalid array size", values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4463;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length, "Invalid array size", values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3319;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length, "Invalid array size", values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length, "Invalid array size", values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1433;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length, "Invalid array size", values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17491;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length, "Invalid array size", values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 13669;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 160;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(76)]
    public Button _left;
    [FieldOffset(100)]
    public Button _right;
    [FieldOffset(136)]
    public Button _up;
    [FieldOffset(52)]
    public Button _down;
    [FieldOffset(4)]
    public Button _a;
    [FieldOffset(16)]
    public Button _b;
    [FieldOffset(28)]
    public Button _c;
    [FieldOffset(40)]
    public Button _d;
    [FieldOffset(64)]
    public Button _l1;
    [FieldOffset(88)]
    public Button _r1;
    [FieldOffset(112)]
    public Button _select;
    [FieldOffset(124)]
    public Button _start;
    [FieldOffset(1)]
    public Byte _analogRightTrigger;
    [FieldOffset(0)]
    public Byte _analogLeftTrigger;
    [FieldOffset(148)]
    public QuantumThumbSticks ThumbSticks;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19249;
        hash = hash * 31 + _left.GetHashCode();
        hash = hash * 31 + _right.GetHashCode();
        hash = hash * 31 + _up.GetHashCode();
        hash = hash * 31 + _down.GetHashCode();
        hash = hash * 31 + _a.GetHashCode();
        hash = hash * 31 + _b.GetHashCode();
        hash = hash * 31 + _c.GetHashCode();
        hash = hash * 31 + _d.GetHashCode();
        hash = hash * 31 + _l1.GetHashCode();
        hash = hash * 31 + _r1.GetHashCode();
        hash = hash * 31 + _select.GetHashCode();
        hash = hash * 31 + _start.GetHashCode();
        hash = hash * 31 + _analogRightTrigger.GetHashCode();
        hash = hash * 31 + _analogLeftTrigger.GetHashCode();
        hash = hash * 31 + ThumbSticks.GetHashCode();
        return hash;
      }
    }
    static partial void GetMaxCountCodeGen(ref int maxCount) {
      maxCount = 6;
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons._left: return _left.IsDown;
        case InputButtons._right: return _right.IsDown;
        case InputButtons._up: return _up.IsDown;
        case InputButtons._down: return _down.IsDown;
        case InputButtons._a: return _a.IsDown;
        case InputButtons._b: return _b.IsDown;
        case InputButtons._c: return _c.IsDown;
        case InputButtons._d: return _d.IsDown;
        case InputButtons._l1: return _l1.IsDown;
        case InputButtons._r1: return _r1.IsDown;
        case InputButtons._select: return _select.IsDown;
        case InputButtons._start: return _start.IsDown;
        default: return false;
      }
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons._left: return _left.WasPressed;
        case InputButtons._right: return _right.WasPressed;
        case InputButtons._up: return _up.WasPressed;
        case InputButtons._down: return _down.WasPressed;
        case InputButtons._a: return _a.WasPressed;
        case InputButtons._b: return _b.WasPressed;
        case InputButtons._c: return _c.WasPressed;
        case InputButtons._d: return _d.WasPressed;
        case InputButtons._l1: return _l1.WasPressed;
        case InputButtons._r1: return _r1.WasPressed;
        case InputButtons._select: return _select.WasPressed;
        case InputButtons._start: return _start.WasPressed;
        default: return false;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        serializer.Stream.Serialize(&p->_analogLeftTrigger);
        serializer.Stream.Serialize(&p->_analogRightTrigger);
        Button.Serialize(&p->_a, serializer);
        Button.Serialize(&p->_b, serializer);
        Button.Serialize(&p->_c, serializer);
        Button.Serialize(&p->_d, serializer);
        Button.Serialize(&p->_down, serializer);
        Button.Serialize(&p->_l1, serializer);
        Button.Serialize(&p->_left, serializer);
        Button.Serialize(&p->_r1, serializer);
        Button.Serialize(&p->_right, serializer);
        Button.Serialize(&p->_select, serializer);
        Button.Serialize(&p->_start, serializer);
        Button.Serialize(&p->_up, serializer);
        Quantum.QuantumThumbSticks.Serialize(&p->ThumbSticks, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct KCCQueryResult {
    public const Int32 SIZE = 112;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    public FPVector2 SurfaceTangent;
    [FieldOffset(16)]
    public FP ContactAngle;
    [FieldOffset(8)]
    public QBoolean Overlapping;
    [FieldOffset(4)]
    public QBoolean Ignore;
    [FieldOffset(40)]
    public Hit Contact;
    [FieldOffset(0)]
    public KCCContactType ContactType;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 3583;
        hash = hash * 31 + SurfaceTangent.GetHashCode();
        hash = hash * 31 + ContactAngle.GetHashCode();
        hash = hash * 31 + Overlapping.GetHashCode();
        hash = hash * 31 + Ignore.GetHashCode();
        hash = hash * 31 + Contact.GetHashCode();
        hash = hash * 31 + (Int32)ContactType;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (KCCQueryResult*)ptr;
        serializer.Stream.Serialize((Int32*)&p->ContactType);
        QBoolean.Serialize(&p->Ignore, serializer);
        QBoolean.Serialize(&p->Overlapping, serializer);
        FP.Serialize(&p->ContactAngle, serializer);
        FPVector2.Serialize(&p->SurfaceTangent, serializer);
        Hit.Serialize(&p->Contact, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumDemoInputPlatformer2D {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(112)]
    public FPVector2 AimDirection;
    [FieldOffset(60)]
    public Button Left;
    [FieldOffset(72)]
    public Button Right;
    [FieldOffset(84)]
    public Button Up;
    [FieldOffset(24)]
    public Button Down;
    [FieldOffset(48)]
    public Button Jump;
    [FieldOffset(12)]
    public Button Dash;
    [FieldOffset(36)]
    public Button Fire;
    [FieldOffset(0)]
    public Button AltFire;
    [FieldOffset(96)]
    public Button Use;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 17191;
        hash = hash * 31 + AimDirection.GetHashCode();
        hash = hash * 31 + Left.GetHashCode();
        hash = hash * 31 + Right.GetHashCode();
        hash = hash * 31 + Up.GetHashCode();
        hash = hash * 31 + Down.GetHashCode();
        hash = hash * 31 + Jump.GetHashCode();
        hash = hash * 31 + Dash.GetHashCode();
        hash = hash * 31 + Fire.GetHashCode();
        hash = hash * 31 + AltFire.GetHashCode();
        hash = hash * 31 + Use.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumDemoInputPlatformer2D*)ptr;
        Button.Serialize(&p->AltFire, serializer);
        Button.Serialize(&p->Dash, serializer);
        Button.Serialize(&p->Down, serializer);
        Button.Serialize(&p->Fire, serializer);
        Button.Serialize(&p->Jump, serializer);
        Button.Serialize(&p->Left, serializer);
        Button.Serialize(&p->Right, serializer);
        Button.Serialize(&p->Up, serializer);
        Button.Serialize(&p->Use, serializer);
        FPVector2.Serialize(&p->AimDirection, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumDemoInputShooter3D {
    public const Int32 SIZE = 96;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(80)]
    public FPVector2 MoveDirection;
    [FieldOffset(0)]
    public FP Pitch;
    [FieldOffset(8)]
    public FP Yaw;
    [FieldOffset(52)]
    public Button Jump;
    [FieldOffset(28)]
    public Button Dash;
    [FieldOffset(40)]
    public Button Fire;
    [FieldOffset(16)]
    public Button AltFire;
    [FieldOffset(64)]
    public Button Use;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 15511;
        hash = hash * 31 + MoveDirection.GetHashCode();
        hash = hash * 31 + Pitch.GetHashCode();
        hash = hash * 31 + Yaw.GetHashCode();
        hash = hash * 31 + Jump.GetHashCode();
        hash = hash * 31 + Dash.GetHashCode();
        hash = hash * 31 + Fire.GetHashCode();
        hash = hash * 31 + AltFire.GetHashCode();
        hash = hash * 31 + Use.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumDemoInputShooter3D*)ptr;
        FP.Serialize(&p->Pitch, serializer);
        FP.Serialize(&p->Yaw, serializer);
        Button.Serialize(&p->AltFire, serializer);
        Button.Serialize(&p->Dash, serializer);
        Button.Serialize(&p->Fire, serializer);
        Button.Serialize(&p->Jump, serializer);
        Button.Serialize(&p->Use, serializer);
        FPVector2.Serialize(&p->MoveDirection, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumDemoInputTopDown {
    public const Int32 SIZE = 144;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(128)]
    public FPVector2 MoveDirection;
    [FieldOffset(112)]
    public FPVector2 AimDirection;
    [FieldOffset(60)]
    public Button Left;
    [FieldOffset(72)]
    public Button Right;
    [FieldOffset(84)]
    public Button Up;
    [FieldOffset(24)]
    public Button Down;
    [FieldOffset(48)]
    public Button Jump;
    [FieldOffset(12)]
    public Button Dash;
    [FieldOffset(36)]
    public Button Fire;
    [FieldOffset(0)]
    public Button AltFire;
    [FieldOffset(96)]
    public Button Use;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 5501;
        hash = hash * 31 + MoveDirection.GetHashCode();
        hash = hash * 31 + AimDirection.GetHashCode();
        hash = hash * 31 + Left.GetHashCode();
        hash = hash * 31 + Right.GetHashCode();
        hash = hash * 31 + Up.GetHashCode();
        hash = hash * 31 + Down.GetHashCode();
        hash = hash * 31 + Jump.GetHashCode();
        hash = hash * 31 + Dash.GetHashCode();
        hash = hash * 31 + Fire.GetHashCode();
        hash = hash * 31 + AltFire.GetHashCode();
        hash = hash * 31 + Use.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumDemoInputTopDown*)ptr;
        Button.Serialize(&p->AltFire, serializer);
        Button.Serialize(&p->Dash, serializer);
        Button.Serialize(&p->Down, serializer);
        Button.Serialize(&p->Fire, serializer);
        Button.Serialize(&p->Jump, serializer);
        Button.Serialize(&p->Left, serializer);
        Button.Serialize(&p->Right, serializer);
        Button.Serialize(&p->Up, serializer);
        Button.Serialize(&p->Use, serializer);
        FPVector2.Serialize(&p->AimDirection, serializer);
        FPVector2.Serialize(&p->MoveDirection, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumHighresThumbSticks {
    public const Int32 SIZE = 6;
    public const Int32 ALIGNMENT = 2;
    [FieldOffset(0)]
    public Byte _leftThumbAngle;
    [FieldOffset(1)]
    public Byte _leftThumbMagnitude;
    [FieldOffset(2)]
    public Int16 _rightThumbX;
    [FieldOffset(4)]
    public Int16 _rightThumbY;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 18181;
        hash = hash * 31 + _leftThumbAngle.GetHashCode();
        hash = hash * 31 + _leftThumbMagnitude.GetHashCode();
        hash = hash * 31 + _rightThumbX.GetHashCode();
        hash = hash * 31 + _rightThumbY.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumHighresThumbSticks*)ptr;
        serializer.Stream.Serialize(&p->_leftThumbAngle);
        serializer.Stream.Serialize(&p->_leftThumbMagnitude);
        serializer.Stream.Serialize(&p->_rightThumbX);
        serializer.Stream.Serialize(&p->_rightThumbY);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumRegularThumbSticks {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 1;
    [FieldOffset(0)]
    public Byte _leftThumbAngle;
    [FieldOffset(1)]
    public Byte _leftThumbMagnitude;
    [FieldOffset(2)]
    public Byte _rightThumbAngle;
    [FieldOffset(3)]
    public Byte _rightThumbMagnitude;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 2731;
        hash = hash * 31 + _leftThumbAngle.GetHashCode();
        hash = hash * 31 + _leftThumbMagnitude.GetHashCode();
        hash = hash * 31 + _rightThumbAngle.GetHashCode();
        hash = hash * 31 + _rightThumbMagnitude.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumRegularThumbSticks*)ptr;
        serializer.Stream.Serialize(&p->_leftThumbAngle);
        serializer.Stream.Serialize(&p->_leftThumbMagnitude);
        serializer.Stream.Serialize(&p->_rightThumbAngle);
        serializer.Stream.Serialize(&p->_rightThumbMagnitude);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Weapon {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    public QBoolean IsRecharging;
    [FieldOffset(0)]
    public Int32 CurrentAmmo;
    [FieldOffset(32)]
    public FrameTimer FireRateTimer;
    [FieldOffset(24)]
    public FrameTimer DelayToStartRechargeTimer;
    [FieldOffset(40)]
    public FrameTimer RechargeRate;
    [FieldOffset(16)]
    public FP ChargeTime;
    [FieldOffset(8)]
    public AssetRef<WeaponData> WeaponData;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8713;
        hash = hash * 31 + IsRecharging.GetHashCode();
        hash = hash * 31 + CurrentAmmo.GetHashCode();
        hash = hash * 31 + FireRateTimer.GetHashCode();
        hash = hash * 31 + DelayToStartRechargeTimer.GetHashCode();
        hash = hash * 31 + RechargeRate.GetHashCode();
        hash = hash * 31 + ChargeTime.GetHashCode();
        hash = hash * 31 + WeaponData.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Weapon*)ptr;
        serializer.Stream.Serialize(&p->CurrentAmmo);
        QBoolean.Serialize(&p->IsRecharging, serializer);
        AssetRef.Serialize(&p->WeaponData, serializer);
        FP.Serialize(&p->ChargeTime, serializer);
        FrameTimer.Serialize(&p->DelayToStartRechargeTimer, serializer);
        FrameTimer.Serialize(&p->FireRateTimer, serializer);
        FrameTimer.Serialize(&p->RechargeRate, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 1528;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<Map> Map;
    [FieldOffset(8)]
    public FP DeltaTime;
    [FieldOffset(16)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(32)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(48)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(64)]
    public RNGSession RngSession;
    [FieldOffset(80)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(128)]
    public BitSet1024 Systems;
    [FieldOffset(256)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(552)]
    public Int32 PlayerConnectedCount;
    [FieldOffset(556)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[960];
    [FieldOffset(1520)]
    public BitSet6 PlayerLastConnectionState;
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 160, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12473;
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerConnectedCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        return hash;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRef.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
        serializer.Stream.Serialize(&p->PlayerConnectedCount);
        FixedArray.Serialize(p->input, serializer, Statics.SerializeInput);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  [ExcludeFromPrototype()]
  public unsafe partial struct QuantumThumbSticks {
    public const Int32 SIZE = 12;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(10)]
    private fixed Byte _alignment_padding_[2];
    [FieldOffset(0)]
    private Int32 _field_used_;
    [FieldOffset(4)]
    [FieldOverlap(4)]
    [FramePrinter.PrintIf("_field_used_", Quantum.QuantumThumbSticks.REGULAR)]
    private QuantumRegularThumbSticks _Regular;
    [FieldOffset(4)]
    [FieldOverlap(4)]
    [FramePrinter.PrintIf("_field_used_", Quantum.QuantumThumbSticks.HIGHRES)]
    private QuantumHighresThumbSticks _HighRes;
    public const Int32 REGULAR = 1;
    public const Int32 HIGHRES = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public QuantumRegularThumbSticks* Regular {
      get {
        fixed (QuantumRegularThumbSticks* p = &_Regular) {
          if (_field_used_ != REGULAR) {
            Native.Utils.Clear(p, 4);
            _field_used_ = REGULAR;
          }
          return p;
        }
      }
    }
    public QuantumHighresThumbSticks* HighRes {
      get {
        fixed (QuantumHighresThumbSticks* p = &_HighRes) {
          if (_field_used_ != HIGHRES) {
            Native.Utils.Clear(p, 6);
            _field_used_ = HIGHRES;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 8867;
        hash = hash * 31 + _field_used_.GetHashCode();
        hash = hash * 31 + _Regular.GetHashCode();
        hash = hash * 31 + _HighRes.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (QuantumThumbSticks*)ptr;
        if (serializer.InputMode) {
          serializer.Stream.SerializeBuffer((byte*)p, Quantum.QuantumThumbSticks.SIZE);
          return;
        }
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == HIGHRES) {
          Quantum.QuantumHighresThumbSticks.Serialize(&p->_HighRes, serializer);
        }
        if (p->_field_used_ == REGULAR) {
          Quantum.QuantumRegularThumbSticks.Serialize(&p->_Regular, serializer);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BulletFields : Quantum.IComponent {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public EntityRef Source;
    [FieldOffset(16)]
    public FPVector2 Direction;
    [FieldOffset(0)]
    public AssetRef<BulletData> BulletData;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 20201;
        hash = hash * 31 + Source.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + BulletData.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BulletFields*)ptr;
        AssetRef.Serialize(&p->BulletData, serializer);
        EntityRef.Serialize(&p->Source, serializer);
        FPVector2.Serialize(&p->Direction, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct KCC2D : Quantum.IComponent {
    public const Int32 SIZE = 328;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public AssetRef<KCC2DConfig> Config;
    [FieldOffset(72)]
    [ExcludeFromPrototype()]
    public FPVector2 _kinematicVelocity;
    [FieldOffset(56)]
    [ExcludeFromPrototype()]
    public FPVector2 _dynamicVelocity;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Int32 LastInputDirection;
    [FieldOffset(88)]
    [ExcludeFromPrototype()]
    public KCCQueryResult Closest;
    [FieldOffset(4)]
    [ExcludeFromPrototype()]
    public KCCState _state;
    [FieldOffset(32)]
    [ExcludeFromPrototype()]
    public FrameTimer _stateTimer;
    [FieldOffset(24)]
    public FrameTimer GroundedJumpTimer;
    [FieldOffset(200)]
    [ExcludeFromPrototype()]
    public QuantumDemoInputPlatformer2D Input;
    [FieldOffset(40)]
    [ExcludeFromPrototype()]
    public FPVector2 InitialPosition;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    public QBoolean IgnoreStep;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19979;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + _kinematicVelocity.GetHashCode();
        hash = hash * 31 + _dynamicVelocity.GetHashCode();
        hash = hash * 31 + LastInputDirection.GetHashCode();
        hash = hash * 31 + Closest.GetHashCode();
        hash = hash * 31 + (Int32)_state;
        hash = hash * 31 + _stateTimer.GetHashCode();
        hash = hash * 31 + GroundedJumpTimer.GetHashCode();
        hash = hash * 31 + Input.GetHashCode();
        hash = hash * 31 + InitialPosition.GetHashCode();
        hash = hash * 31 + IgnoreStep.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (KCC2D*)ptr;
        serializer.Stream.Serialize(&p->LastInputDirection);
        serializer.Stream.Serialize((Int32*)&p->_state);
        QBoolean.Serialize(&p->IgnoreStep, serializer);
        AssetRef.Serialize(&p->Config, serializer);
        FrameTimer.Serialize(&p->GroundedJumpTimer, serializer);
        FrameTimer.Serialize(&p->_stateTimer, serializer);
        FPVector2.Serialize(&p->InitialPosition, serializer);
        FPVector2.Serialize(&p->_dynamicVelocity, serializer);
        FPVector2.Serialize(&p->_kinematicVelocity, serializer);
        Quantum.KCCQueryResult.Serialize(&p->Closest, serializer);
        Quantum.QuantumDemoInputPlatformer2D.Serialize(&p->Input, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct MovementData : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QBoolean IsFacingRight;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 19213;
        hash = hash * 31 + IsFacingRight.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (MovementData*)ptr;
        QBoolean.Serialize(&p->IsFacingRight, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLink : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef Player;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 21391;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLink*)ptr;
        PlayerRef.Serialize(&p->Player, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SkillFields : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public FP TimeToActivate;
    [FieldOffset(8)]
    public EntityRef Source;
    [FieldOffset(0)]
    public AssetRef<SkillData> SkillData;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12613;
        hash = hash * 31 + TimeToActivate.GetHashCode();
        hash = hash * 31 + Source.GetHashCode();
        hash = hash * 31 + SkillData.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SkillFields*)ptr;
        AssetRef.Serialize(&p->SkillData, serializer);
        EntityRef.Serialize(&p->Source, serializer);
        FP.Serialize(&p->TimeToActivate, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SkillInventory : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FrameTimer CastRateTimer;
    [FieldOffset(0)]
    public AssetRef<SkillInventoryData> SkillInventoryData;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 1319;
        hash = hash * 31 + CastRateTimer.GetHashCode();
        hash = hash * 31 + SkillInventoryData.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SkillInventory*)ptr;
        AssetRef.Serialize(&p->SkillInventoryData, serializer);
        FrameTimer.Serialize(&p->CastRateTimer, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SpawnIdentifier : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 11057;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SpawnIdentifier*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SpawnPlaces : Quantum.IComponentSingleton {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<EntityRef> Spawners;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 12227;
        hash = hash * 31 + Spawners.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      Spawners = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.SpawnPlaces*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SpawnPlaces*)ptr;
        QList.Serialize(&p->Spawners, serializer, Statics.SerializeEntityRef);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Status : Quantum.IComponent {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRef<StatusData> StatusData;
    [FieldOffset(16)]
    public FP CurrentHealth;
    [FieldOffset(0)]
    public QBoolean IsDead;
    [FieldOffset(48)]
    public FrameTimer RespawnTimer;
    [FieldOffset(40)]
    public FrameTimer RegenTimer;
    [FieldOffset(32)]
    public FrameTimer InvincibleTimer;
    [FieldOffset(24)]
    public FrameTimer DisconnectedTimer;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 7673;
        hash = hash * 31 + StatusData.GetHashCode();
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + IsDead.GetHashCode();
        hash = hash * 31 + RespawnTimer.GetHashCode();
        hash = hash * 31 + RegenTimer.GetHashCode();
        hash = hash * 31 + InvincibleTimer.GetHashCode();
        hash = hash * 31 + DisconnectedTimer.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Status*)ptr;
        QBoolean.Serialize(&p->IsDead, serializer);
        AssetRef.Serialize(&p->StatusData, serializer);
        FP.Serialize(&p->CurrentHealth, serializer);
        FrameTimer.Serialize(&p->DisconnectedTimer, serializer);
        FrameTimer.Serialize(&p->InvincibleTimer, serializer);
        FrameTimer.Serialize(&p->RegenTimer, serializer);
        FrameTimer.Serialize(&p->RespawnTimer, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponInventory : Quantum.IComponent {
    public const Int32 SIZE = 104;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int32 CurrentWeaponIndex;
    [FieldOffset(8)]
    [FramePrinter.FixedArrayAttribute(typeof(Weapon), 2)]
    private fixed Byte _Weapons_[96];
    public FixedArray<Weapon> Weapons {
      get {
        fixed (byte* p = _Weapons_) { return new FixedArray<Weapon>(p, 48, 2); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 4513;
        hash = hash * 31 + CurrentWeaponIndex.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Weapons);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponInventory*)ptr;
        serializer.Stream.Serialize(&p->CurrentWeaponIndex);
        FixedArray.Serialize(p->Weapons, serializer, Statics.SerializeWeapon);
    }
  }
  public unsafe partial interface ISignalOnCharacterRespawn : ISignal {
    void OnCharacterRespawn(Frame f, EntityRef character);
  }
  public unsafe partial interface ISignalOnCharacterHit : ISignal {
    void OnCharacterHit(Frame f, EntityRef bullet, EntityRef character, FP damage);
  }
  public unsafe partial interface ISignalOnCharacterSkillHit : ISignal {
    void OnCharacterSkillHit(Frame f, EntityRef skill, EntityRef character);
  }
  public unsafe partial interface ISignalOnCharacterDeath : ISignal {
    void OnCharacterDeath(Frame f, EntityRef deadCharacter, EntityRef killer);
  }
  public unsafe partial interface ISignalOnKCC2DPreCollision : ISignal {
    void OnKCC2DPreCollision(Frame f, EntityRef entity, KCC2D* kcc, KCCQueryResult* collision);
  }
  public unsafe partial interface ISignalOnKCC2DTrigger : ISignal {
    void OnKCC2DTrigger(Frame f, EntityRef entity, KCC2D* kcc, Hit trigger);
  }
  public unsafe partial interface ISignalOnKCC2DSolverCollision : ISignal {
    void OnKCC2DSolverCollision(Frame f, EntityRef entity, KCC2D* kcc, KCCQueryResult* collision, Int32 iteration);
  }
  public static unsafe partial class Constants {
  }
  public unsafe partial class Frame {
    private ISignalOnCharacterRespawn[] _ISignalOnCharacterRespawnSystems;
    private ISignalOnCharacterHit[] _ISignalOnCharacterHitSystems;
    private ISignalOnCharacterSkillHit[] _ISignalOnCharacterSkillHitSystems;
    private ISignalOnCharacterDeath[] _ISignalOnCharacterDeathSystems;
    private ISignalOnKCC2DPreCollision[] _ISignalOnKCC2DPreCollisionSystems;
    private ISignalOnKCC2DTrigger[] _ISignalOnKCC2DTriggerSystems;
    private ISignalOnKCC2DSolverCollision[] _ISignalOnKCC2DSolverCollisionSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities, 256);
      _ISignalOnCharacterRespawnSystems = BuildSignalsArray<ISignalOnCharacterRespawn>();
      _ISignalOnCharacterHitSystems = BuildSignalsArray<ISignalOnCharacterHit>();
      _ISignalOnCharacterSkillHitSystems = BuildSignalsArray<ISignalOnCharacterSkillHit>();
      _ISignalOnCharacterDeathSystems = BuildSignalsArray<ISignalOnCharacterDeath>();
      _ISignalOnKCC2DPreCollisionSystems = BuildSignalsArray<ISignalOnKCC2DPreCollision>();
      _ISignalOnKCC2DTriggerSystems = BuildSignalsArray<ISignalOnKCC2DTrigger>();
      _ISignalOnKCC2DSolverCollisionSystems = BuildSignalsArray<ISignalOnKCC2DSolverCollision>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.BulletFields>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BulletFields>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.KCC2D>();
      BuildSignalsArrayOnComponentRemoved<Quantum.KCC2D>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.MovementData>();
      BuildSignalsArrayOnComponentRemoved<Quantum.MovementData>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.SkillFields>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SkillFields>();
      BuildSignalsArrayOnComponentAdded<Quantum.SkillInventory>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SkillInventory>();
      BuildSignalsArrayOnComponentAdded<Quantum.SpawnIdentifier>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SpawnIdentifier>();
      BuildSignalsArrayOnComponentAdded<Quantum.SpawnPlaces>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SpawnPlaces>();
      BuildSignalsArrayOnComponentAdded<Quantum.Status>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Status>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponInventory>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponInventory>();
    }
    partial void SetPlayerInputCodeGen(PlayerRef player, Input input) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->_left = i->_left.Update(this.Number, input._left);
      i->_right = i->_right.Update(this.Number, input._right);
      i->_up = i->_up.Update(this.Number, input._up);
      i->_down = i->_down.Update(this.Number, input._down);
      i->_a = i->_a.Update(this.Number, input._a);
      i->_b = i->_b.Update(this.Number, input._b);
      i->_c = i->_c.Update(this.Number, input._c);
      i->_d = i->_d.Update(this.Number, input._d);
      i->_l1 = i->_l1.Update(this.Number, input._l1);
      i->_r1 = i->_r1.Update(this.Number, input._r1);
      i->_select = i->_select.Update(this.Number, input._select);
      i->_start = i->_start.Update(this.Number, input._start);
      i->_analogRightTrigger = input._analogRightTrigger;
      i->_analogLeftTrigger = input._analogLeftTrigger;
      i->ThumbSticks = input.ThumbSticks;
    }
    public Input* GetPlayerInput(PlayerRef player) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    partial void GetPlayerLastConnectionStateCodeGen(ref BitSetRef bitSet) {
      bitSet = new(_globals->PlayerLastConnectionState.Bits, _globals->PlayerLastConnectionState.Length);
    }
    partial void ResetPhysicsCodeGen() {
      if (Context.Physics2D != null && Physics2D.Map != null && Physics2D.Map.Guid.IsDynamic) Physics2D.ResetMap();
      Physics2D.Init(_globals->PhysicsState2D.MapStaticCollidersState.TrackedMap);
      if (Context.Physics3D != null && Physics3D.Map != null && Physics3D.Map.Guid.IsDynamic) Physics3D.ResetMap();
      Physics3D.Init(_globals->PhysicsState3D.MapStaticCollidersState.TrackedMap);
    }
    public unsafe partial struct FrameSignals {
      public void OnCharacterRespawn(EntityRef character) {
        var array = _f._ISignalOnCharacterRespawnSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnCharacterRespawn(_f, character);
          }
        }
      }
      public void OnCharacterHit(EntityRef bullet, EntityRef character, FP damage) {
        var array = _f._ISignalOnCharacterHitSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnCharacterHit(_f, bullet, character, damage);
          }
        }
      }
      public void OnCharacterSkillHit(EntityRef skill, EntityRef character) {
        var array = _f._ISignalOnCharacterSkillHitSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnCharacterSkillHit(_f, skill, character);
          }
        }
      }
      public void OnCharacterDeath(EntityRef deadCharacter, EntityRef killer) {
        var array = _f._ISignalOnCharacterDeathSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnCharacterDeath(_f, deadCharacter, killer);
          }
        }
      }
      public void OnKCC2DPreCollision(EntityRef entity, KCC2D* kcc, KCCQueryResult* collision) {
        var array = _f._ISignalOnKCC2DPreCollisionSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnKCC2DPreCollision(_f, entity, kcc, collision);
          }
        }
      }
      public void OnKCC2DTrigger(EntityRef entity, KCC2D* kcc, Hit trigger) {
        var array = _f._ISignalOnKCC2DTriggerSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnKCC2DTrigger(_f, entity, kcc, trigger);
          }
        }
      }
      public void OnKCC2DSolverCollision(EntityRef entity, KCC2D* kcc, KCCQueryResult* collision, Int32 iteration) {
        var array = _f._ISignalOnKCC2DSolverCollisionSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnKCC2DSolverCollision(_f, entity, kcc, collision, iteration);
          }
        }
      }
    }
  }
  public unsafe partial class Statics {
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeWeapon;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitStaticDelegatesGen() {
      SerializeEntityRef = EntityRef.Serialize;
      SerializeWeapon = Quantum.Weapon.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
    static partial void RegisterSimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(AssetGuid), AssetGuid.SIZE);
      typeRegistry.Register(typeof(AssetRef), AssetRef.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      typeRegistry.Register(typeof(Quantum.BulletFields), Quantum.BulletFields.SIZE);
      typeRegistry.Register(typeof(Button), Button.SIZE);
      typeRegistry.Register(typeof(CallbackFlags), 4);
      typeRegistry.Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      typeRegistry.Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      typeRegistry.Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      typeRegistry.Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      typeRegistry.Register(typeof(ComponentTypeRef), ComponentTypeRef.SIZE);
      typeRegistry.Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      typeRegistry.Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      typeRegistry.Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      typeRegistry.Register(typeof(EntityRef), EntityRef.SIZE);
      typeRegistry.Register(typeof(FP), FP.SIZE);
      typeRegistry.Register(typeof(FPBounds2), FPBounds2.SIZE);
      typeRegistry.Register(typeof(FPBounds3), FPBounds3.SIZE);
      typeRegistry.Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      typeRegistry.Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      typeRegistry.Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      typeRegistry.Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      typeRegistry.Register(typeof(FPVector2), FPVector2.SIZE);
      typeRegistry.Register(typeof(FPVector3), FPVector3.SIZE);
      typeRegistry.Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      typeRegistry.Register(typeof(FrameTimer), FrameTimer.SIZE);
      typeRegistry.Register(typeof(HingeJoint), HingeJoint.SIZE);
      typeRegistry.Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      typeRegistry.Register(typeof(Hit), Hit.SIZE);
      typeRegistry.Register(typeof(Hit3D), Hit3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      typeRegistry.Register(typeof(Quantum.InputButtons), 4);
      typeRegistry.Register(typeof(IntVector2), IntVector2.SIZE);
      typeRegistry.Register(typeof(IntVector3), IntVector3.SIZE);
      typeRegistry.Register(typeof(Joint), Joint.SIZE);
      typeRegistry.Register(typeof(Joint3D), Joint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.KCC2D), Quantum.KCC2D.SIZE);
      typeRegistry.Register(typeof(Quantum.KCCContactType), 4);
      typeRegistry.Register(typeof(Quantum.KCCQueryResult), Quantum.KCCQueryResult.SIZE);
      typeRegistry.Register(typeof(Quantum.KCCState), 4);
      typeRegistry.Register(typeof(LayerMask), LayerMask.SIZE);
      typeRegistry.Register(typeof(MapEntityId), MapEntityId.SIZE);
      typeRegistry.Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      typeRegistry.Register(typeof(Quantum.MovementData), Quantum.MovementData.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      typeRegistry.Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      typeRegistry.Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      typeRegistry.Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      typeRegistry.Register(typeof(NullableFP), NullableFP.SIZE);
      typeRegistry.Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      typeRegistry.Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      typeRegistry.Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      typeRegistry.Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      typeRegistry.Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks2D), PhysicsCallbacks2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks3D), PhysicsCallbacks3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      typeRegistry.Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints2D), PhysicsJoints2D.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints3D), PhysicsJoints3D.SIZE);
      typeRegistry.Register(typeof(PhysicsQueryRef), PhysicsQueryRef.SIZE);
      typeRegistry.Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerLink), Quantum.PlayerLink.SIZE);
      typeRegistry.Register(typeof(PlayerRef), PlayerRef.SIZE);
      typeRegistry.Register(typeof(Ptr), Ptr.SIZE);
      typeRegistry.Register(typeof(QBoolean), QBoolean.SIZE);
      typeRegistry.Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumDemoInputPlatformer2D), Quantum.QuantumDemoInputPlatformer2D.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumDemoInputShooter3D), Quantum.QuantumDemoInputShooter3D.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumDemoInputTopDown), Quantum.QuantumDemoInputTopDown.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumHighresThumbSticks), Quantum.QuantumHighresThumbSticks.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumRegularThumbSticks), Quantum.QuantumRegularThumbSticks.SIZE);
      typeRegistry.Register(typeof(Quantum.QuantumThumbSticks), Quantum.QuantumThumbSticks.SIZE);
      typeRegistry.Register(typeof(QueryOptions), 2);
      typeRegistry.Register(typeof(RNGSession), RNGSession.SIZE);
      typeRegistry.Register(typeof(Shape2D), Shape2D.SIZE);
      typeRegistry.Register(typeof(Shape3D), Shape3D.SIZE);
      typeRegistry.Register(typeof(Quantum.SkillFields), Quantum.SkillFields.SIZE);
      typeRegistry.Register(typeof(Quantum.SkillInventory), Quantum.SkillInventory.SIZE);
      typeRegistry.Register(typeof(Quantum.SpawnIdentifier), Quantum.SpawnIdentifier.SIZE);
      typeRegistry.Register(typeof(Quantum.SpawnPlaces), Quantum.SpawnPlaces.SIZE);
      typeRegistry.Register(typeof(SpringJoint), SpringJoint.SIZE);
      typeRegistry.Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Status), Quantum.Status.SIZE);
      typeRegistry.Register(typeof(Transform2D), Transform2D.SIZE);
      typeRegistry.Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      typeRegistry.Register(typeof(Transform3D), Transform3D.SIZE);
      typeRegistry.Register(typeof(View), View.SIZE);
      typeRegistry.Register(typeof(Quantum.Weapon), Quantum.Weapon.SIZE);
      typeRegistry.Register(typeof(Quantum.WeaponInventory), Quantum.WeaponInventory.SIZE);
      typeRegistry.Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
    static partial void InitComponentTypeIdGen() {
      ComponentTypeId.Reset(ComponentTypeId.BuiltInComponentCount + 10)
        .AddBuiltInComponents()
        .Add<Quantum.BulletFields>(Quantum.BulletFields.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.KCC2D>(Quantum.KCC2D.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.MovementData>(Quantum.MovementData.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerLink>(Quantum.PlayerLink.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.SkillFields>(Quantum.SkillFields.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.SkillInventory>(Quantum.SkillInventory.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.SpawnIdentifier>(Quantum.SpawnIdentifier.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.SpawnPlaces>(Quantum.SpawnPlaces.Serialize, null, Quantum.SpawnPlaces.OnRemoved, ComponentFlags.Singleton)
        .Add<Quantum.Status>(Quantum.Status.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WeaponInventory>(Quantum.WeaponInventory.Serialize, null, null, ComponentFlags.None)
        .Finish();
    }
    [Preserve()]
    public static void EnsureNotStrippedGen() {
      FramePrinter.EnsureNotStripped();
      FramePrinter.EnsurePrimitiveNotStripped<CallbackFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.KCCContactType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.KCCState>();
      FramePrinter.EnsurePrimitiveNotStripped<QueryOptions>();
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
